---
// src/components/admin/PostForm.astro
export interface Props {
  postData?: Record<string, any>; // To pre-fill form for editing
}

const { postData = {} } = Astro.props;

const postTypes = ["standard", "fleeting", "bookNote"];
const today = new Date().toISOString().split('T')[0];

// Helper to get value for fields, handling different data types
function getValue(key: string, defaultValue: any = '') {
  if (key === 'draft') {
    return typeof postData[key] === 'boolean' ? postData[key] : true; // Default draft to true for new, or use existing
  }
  return postData[key] !== undefined && postData[key] !== null ? postData[key] : defaultValue;
}

// For tags, convert array back to comma-separated string for input field
const tagsString = Array.isArray(postData.tags) ? postData.tags.join(', ') : (postData.tags || '');
const bookTagsString = Array.isArray(postData.bookTags) ? postData.bookTags.join(', ') : (postData.bookTags || '');

// Format date for date input (YYYY-MM-DD)
let pubDateValue = today;
if (postData.pubDate) {
  try {
    if (postData.pubDate instanceof Date) {
      pubDateValue = postData.pubDate.toISOString().split('T')[0];
    } else if (typeof postData.pubDate === 'string') {
      pubDateValue = new Date(postData.pubDate).toISOString().split('T')[0];
    }
  } catch (e) {
    console.warn("Could not parse existing pubDate for form:", postData.pubDate);
  }
}
---
<fieldset>
  <legend>Core Information</legend>
  <div class="form-field">
    <label for="title">Title (Required)</label>
    <input type="text" id="title" name="title" value={getValue('title')} required />
  </div>
  <div class="form-field">
    <label for="pubDate">Publication Date</label>
    <input type="date" id="pubDate" name="pubDate" value={pubDateValue} required />
  </div>
  <div class="form-field">
    <label for="description">Description (Optional)</label>
    <textarea id="description" name="description">{getValue('description')}</textarea>
  </div>
  <div class="form-field">
    <label for="postType">Post Type</label>
    <select id="postType" name="postType">
      {postTypes.map(type => (
        <option value={type} selected={getValue('postType', 'standard') === type}>
          {type.charAt(0).toUpperCase() + type.slice(1)}
        </option>
      ))}
    </select>
  </div>
</fieldset>

<fieldset>
  <legend>Metadata</legend>
  <div class="form-field">
    <label for="tags">Tags (Optional, comma-separated)</label>
    <input type="text" id="tags" name="tags" value={tagsString} placeholder="e.g., tech, philosophy, life" />
  </div>
  <div class="form-field">
    <label for="series">Series (Optional)</label>
    <input type="text" id="series" name="series" value={getValue('series')} placeholder="e.g., My Learning Journey" />
  </div>
  <div class="form-field">
    <label>
      <input type="checkbox" id="draft" name="draft" checked={getValue('draft', true)} />
      Mark as Draft
    </label>
  </div>
</fieldset>

<fieldset id="formBookNoteFields" class="book-note-fields" style={getValue('postType', 'standard') === 'bookNote' ? '' : 'display: none;'}>
  <legend>Book Note Details</legend>
  <div class="form-field">
    <label for="bookTitle">Book Title</label>
    <input type="text" id="bookTitle" name="bookTitle" value={getValue('bookTitle')} />
  </div>
  <div class="form-field">
    <label for="bookAuthor">Book Author</label>
    <input type="text" id="bookAuthor" name="bookAuthor" value={getValue('bookAuthor')} />
  </div>
  <div class="form-field">
    <label for="bookCoverImageName">Book Cover Image Name</label>
    <input type="text" id="bookCoverImageName" name="bookCoverImageName" value={getValue('bookCover.imageName')} placeholder="e.g., meditations-cover" />
  </div>
  <div class="form-field">
    <label for="bookCoverAlt">Book Cover Alt Text</label>
    <input type="text" id="bookCoverAlt" name="bookCoverAlt" value={getValue('bookCover.alt')} />
  </div>
  <div class="form-field">
    <label for="quotesRef">Quotes Reference</label>
    <input type="text" id="quotesRef" name="quotesRef" value={getValue('quotesRef')} placeholder="e.g., meditations-quotes" />
  </div>
  <div class="form-field">
    <label for="bookTags">Book Tags</label>
    <input type="text" id="bookTags" name="bookTags" value={bookTagsString} placeholder="e.g., stoicism, philosophy" />
  </div>
</fieldset>

<fieldset>
    <legend>Body Content</legend>
    <div class="form-field">
        <label for="bodyContent">Post Body (Markdown)</label>
        <textarea id="bodyContent" name="bodyContent" rows="15" placeholder="Start writing your Markdown content here...">{getValue('bodyContent')}</textarea>
    </div>
</fieldset>

<script>
  // This script is scoped to the PostForm component instance
  // It needs to find elements relative to its own scope if multiple forms were on a page,
  // but since it's one form per admin page, direct IDs are okay here.
  const postTypeSelect = document.getElementById('postType') as HTMLSelectElement | null;
  const bookNoteFields = document.getElementById('formBookNoteFields') as HTMLFieldSetElement | null;

  function toggleBookNoteFields() {
    if (postTypeSelect && bookNoteFields) {
      bookNoteFields.style.display = postTypeSelect.value === 'bookNote' ? 'block' : 'none';
    }
  }

  if (postTypeSelect) {
    postTypeSelect.addEventListener('change', toggleBookNoteFields);
    // Initial check in case the form is pre-filled (for edit mode)
    // The style attribute directly on formBookNoteFields handles initial state from props.
    // toggleBookNoteFields(); // This would override the server-set style if not careful
  }
</script>

{/* Styles for the form structure. Consider moving to global.css if these are general form styles. */}
<style>
  /* These styles were previously in create-post.astro <style is:global> */
  /* They are now scoped to this component by default */
  fieldset { /* Scoped to .post-form fieldset if parent form has .post-form class */
    border: 1px solid var(--color-border-subtle);
    padding: 1rem 1.5rem 1.5rem;
    margin-bottom: 1.5rem;
    border-radius: 4px;
  }
  legend {
    font-family: var(--font-sans);
    font-weight: 600;
    font-size: 1.1rem;
    color: var(--color-accent);
    padding: 0 0.5em;
  }
  .form-field {
    margin-bottom: 1rem;
  }
  .form-field:last-child {
    margin-bottom: 0;
  }
  .form-field label {
    display: block;
    margin-bottom: 0.35rem;
    font-weight: 500;
    font-size: 0.9rem;
    color: var(--color-text);
    font-family: var(--font-sans);
  }
  .form-field input[type="text"],
  .form-field input[type="date"],
  .form-field select,
  .form-field textarea {
    width: 100%;
    padding: 0.6em 0.8em;
    border: 1px solid var(--color-border-subtle);
    border-radius: 3px;
    font-family: var(--font-sans);
    font-size: 1rem;
    background-color: var(--color-background);
    color: var(--color-text);
    box-sizing: border-box;
    transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }
  .form-field input[type="text"]:focus,
  .form-field input[type="date"]:focus,
  .form-field select:focus,
  .form-field textarea:focus {
    outline: none;
    border-color: var(--color-accent);
    box-shadow: 0 0 0 2px color-mix(in srgb, var(--color-accent) 25%, transparent);
  }
  .form-field textarea { min-height: 80px; line-height: 1.6; }
  #bodyContent { min-height: 200px; } /* Specific ID for main body textarea */
  .form-field input[type="checkbox"] { margin-right: 0.5rem; vertical-align: middle; }
  .form-field label input[type="checkbox"] { width: auto; }

  .book-note-fields { /* ID is #formBookNoteFields */
    border-color: var(--color-accent);
    margin-top: 1.5rem;
  }
  .book-note-fields legend { color: var(--color-accent); }
</style>
