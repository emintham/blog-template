---
export const prerender = false;
import BaseLayout from "../../../layouts/BaseLayout.astro";
import PostForm from "../../../components/admin/PostForm";
import { SITE_TITLE } from "../../../siteConfig";
import fs from "node:fs/promises";
import path from "node:path";
import matter from "gray-matter";
import yaml from "js-yaml";
// import { z } from "astro:content"; // Removed unused z import
import "../../../styles/admin.css";
import type { PostSourceData } from "../../../types/admin";
import { quoteSchema } from "../../../content/config"; // Import quoteSchema
import {
  getUniqueTagNames,
  getUniqueSeriesNames,
} from "../../../utils/contentUtils"; // Updated path
import FeedbackDisplay from "../../../components/admin/FeedbackDisplay";

if (import.meta.env.PROD) {
  return new Response(null, {
    status: 404,
    statusText: "Not Found (Admin Only)",
  });
}

const { slug } = Astro.params;
let postToEdit: PostSourceData | null = null;
let errorMessage: string | null = null;

if (!slug) {
  errorMessage = "Error: No post slug was provided in the URL.";
  Astro.response.status = 400; // Bad Request
} else {
  const projectRoot = process.cwd();
  const contentDir = path.join(projectRoot, "src", "content", "blog");
  const potentialFilenames = [`${slug}.md`, `${slug}.mdx`];
  let fileFound = false;

  for (const filename of potentialFilenames) {
    const filePath = path.join(contentDir, filename);
    try {
      const fileContentString = await fs.readFile(filePath, "utf-8");
      const { data: frontmatterData, content: bodyContentString } =
        matter(fileContentString);

      postToEdit = {
        originalSlug: slug,
        originalFilePath: filePath, // Store full path
        originalExtension: path.extname(filePath),
        ...frontmatterData,
        bodyContent: bodyContentString.trim(),
        // inlineQuotes will be populated below if applicable
      };

      // If it's a bookNote and has a quotesRef, try to load and parse the quotes YAML
      if (postToEdit.postType === "bookNote" && postToEdit.quotesRef) {
        const quotesFilePath = path.join(
          projectRoot,
          "src",
          "content",
          "bookQuotes",
          `${postToEdit.quotesRef}.yaml`
        );
        try {
          const quotesFileContent = await fs.readFile(quotesFilePath, "utf-8");
          const parsedQuotesData = yaml.load(quotesFileContent) as {
            bookSlug?: string;
            quotes?: unknown[]; // Use unknown for initial parsing
          };

          // type ParsedQuote = z.infer<typeof quoteSchema>; // Removed as q_typed infers type directly

          if (parsedQuotesData && Array.isArray(parsedQuotesData.quotes)) {
            postToEdit.inlineQuotes = parsedQuotesData.quotes.map(
              (q_raw: unknown, index: number) => {
                const parsedQuote = quoteSchema.safeParse(q_raw);
                if (parsedQuote.success) {
                  const q_typed = parsedQuote.data;
                  return {
                    id: `loaded-${slug}-${index}-${Date.now()}`,
                    text: q_typed.text || "",
                    quoteAuthor: q_typed.quoteAuthor || "",
                    tags: Array.isArray(q_typed.tags) ? q_typed.tags.map(String) : [],
                    quoteSource: q_typed.quoteSource || "",
                  };
                } else {
                  console.warn(`Error parsing quote at index ${index}:`, parsedQuote.error.flatten());
                  return { id: `error-${slug}-${index}-${Date.now()}`, text: "Error: Could not parse quote", tags: [], quoteAuthor: "", quoteSource: "" };
                }
              }
            );
          } else {
            postToEdit.inlineQuotes = [];
          }
        } catch (quoteError: unknown) {
          console.warn(
            `Could not load or parse quotes file: ${quotesFilePath}`,
            quoteError instanceof Error ? quoteError.message : String(quoteError)
          );
          postToEdit.inlineQuotes = [];
        }
      }

      // PostForm's useEffect and formatDateForInput will handle date formatting.
      // No need to pre-format pubDate here.

      fileFound = true;
      break;
    } catch { // _e removed
      // File not found or error reading
    }
  }

  if (!fileFound) {
    errorMessage = `Error: Post with slug "${slug}" not found in src/content/blog/.`;
    Astro.response.status = 404;
  }
}

// Fetch all unique tag names for suggestions
const allPostTags = await getUniqueTagNames("blog", (data) => data.tags);
const allBookTags = await getUniqueTagNames(
  "blog",
  (data) => data.bookTags,
  (entry) => entry.data.postType === "bookNote"
);
const allQuoteTags = await getUniqueTagNames(
  "bookQuotes",
  (data) => data.quotes?.flatMap((q) => q.tags || []) || []
);
const allSeriesNames = await getUniqueSeriesNames();

const pageTitleDisplay = postToEdit?.title || slug || "Post";
const pageTitle = `Edit: ${pageTitleDisplay} - ${SITE_TITLE}`;
const pageDescription = `Edit the post: ${pageTitleDisplay}. This page is available in development mode only.`;
---

<BaseLayout title={pageTitle} description={pageDescription} isAdminPage={true}>
  <div class="page-detail-header">
    <h1>
      {
        postToEdit?.title
          ? `${postToEdit.title}`
          : slug
            ? `"${slug}"`
            : "Unknown"
      }
    </h1>
  </div>

  {
    errorMessage && (
      <div class="error-message-container">
        <p>{errorMessage}</p>
      </div>
    )
  }
  {
    postToEdit && !errorMessage && (
      <form
        id="editPostForm"
        class="post-form"
        data-form-type="edit"
        data-original-slug={postToEdit.originalSlug}
      >
        <input
          type="hidden"
          name="originalSlug"
          value={postToEdit.originalSlug}
        />
        <input
          type="hidden"
          name="originalFilePath"
          value={postToEdit.originalFilePath}
        />
        <input
          type="hidden"
          name="originalExtension"
          value={postToEdit.originalExtension}
        />

        <PostForm
          client:load
          postData={postToEdit}
          formId="editPostForm"
          allPostTags={allPostTags}
          allBookTags={allBookTags}
          allQuoteTags={allQuoteTags}
          allSeriesNames={allSeriesNames}
        />

        <button type="submit" class="button-primary">
          Update Post
        </button>
      </form>
    )
  }

  <div id="formFeedback" class="form-feedback-container">
    <p id="feedbackMessage"></p>
    <a id="viewPostLink" href="#" class="button-edit" style="display:none;"
      >View Post</a
    >
  </div>
  <FeedbackDisplay client:only="react" formId="editPostForm" />
  {/* Changed to client:only="react" */}
</BaseLayout>
