---
export const prerender = false;
import BaseLayout from '../../../layouts/BaseLayout.astro';
import PostForm from '../../../components/admin/PostForm.tsx';
import { SITE_TITLE } from '../../../siteConfig';
import fs from 'node:fs/promises';
import path from 'node:path';
import matter from 'gray-matter';
import '../../../styles/admin.css'; // Import admin styles
import type { PostSourceData } from '../../../types/admin';


if (import.meta.env.PROD) {
  return new Response(null, { status: 404, statusText: 'Not Found (Admin Only)' });
}

const { slug } = Astro.params;
let postToEdit: PostSourceData | null = null;
let errorMessage: string | null = null;

if (!slug) {
  errorMessage = "Error: No post slug was provided in the URL.";
  Astro.response.status = 400; // Bad Request
} else {
  const projectRoot = process.cwd();
  const contentDir = path.join(projectRoot, 'src', 'content', 'blog');
  const potentialFilenames = [`${slug}.md`, `${slug}.mdx`];
  let fileFound = false;

  for (const filename of potentialFilenames) {
    const filePath = path.join(contentDir, filename);
    try {
      const fileContentString = await fs.readFile(filePath, 'utf-8');
      const { data: frontmatterData, content: bodyContentString } = matter(fileContentString);

      postToEdit = {
        originalSlug: slug,
        originalFilePath: filePath, // Store full path
        originalExtension: path.extname(filePath),
        ...frontmatterData,
        bodyContent: bodyContentString.trim(),
      };

      // PostForm's useEffect and formatDateForInput will handle date formatting.
      // No need to pre-format pubDate here.

      fileFound = true;
      break;
    } catch (e) {
      // File not found or error reading
    }
  }

  if (!fileFound) {
    errorMessage = `Error: Post with slug "${slug}" not found in src/content/blog/.`;
    Astro.response.status = 404;
  }
}

const pageTitleDisplay = postToEdit?.title || slug || "Post";
const pageTitle = `Edit Post: ${pageTitleDisplay} (DEV) - ${SITE_TITLE}`;
---

<BaseLayout title={pageTitle}>
  <div class="page-detail-header">
    <h1>Edit Post: {postToEdit?.title ? `"${postToEdit.title}"` : (slug ? `"${slug}"` : "Unknown")}</h1>
  </div>

  {errorMessage && !postToEdit && (
    <div class="form-feedback-container error-message visible">
      <p>{errorMessage}</p>
      <a href="/admin/manage-posts/" class="button-edit">Back to Manage Posts</a>
    </div>
  )}

  {postToEdit && !errorMessage && (
    <form
      id="editPostForm"
      class="post-form"
      data-form-type="edit"
      data-original-slug={postToEdit.originalSlug}
    >
      {/* Hidden fields are still useful for initial state if JS fails or for non-JS scenarios,
          but adminFormHandler.js will also update them if slug changes. */}
      <input type="hidden" name="originalSlug" value={postToEdit.originalSlug} />
      <input type="hidden" name="originalFilePath" value={postToEdit.originalFilePath} />
      <input type="hidden" name="originalExtension" value={postToEdit.originalExtension} />

      <PostForm client:load postData={postToEdit} formId="editPostForm" />

      <button type="submit" class="button-primary">Update Post</button>
    </form>
  )}

  <div id="formFeedback" class="form-feedback-container">
    <p id="feedbackMessage"></p>
    <a id="viewPostLink" href="#" style="display:none;" class="button-edit">View Post</a>
    <a href="/admin/manage-posts/" class="button-edit" style="margin-left:1rem;">Back to Manage Posts</a>
  </div>
  <script src="/scripts/adminFormHandler.js" is:inline></script>
</BaseLayout>

<style>
  .page-detail-header {
    margin-bottom: 1.5rem;
  }
  .post-form button[type="submit"] {
    margin-top: 1rem;
  }
  #formFeedback a.button-edit {
    margin-top: 0.5rem;
    display: inline-block; /* Ensure it's visible when display is not none */
  }
</style>
