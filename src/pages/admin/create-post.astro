---
// src/pages/admin/create-post.astro
import BaseLayout from '../../layouts/BaseLayout.astro';
import PostForm from '../../components/admin/PostForm.tsx';
import { SITE_TITLE } from '../../siteConfig';

if (import.meta.env.PROD) {
  return new Response(null, { status: 404, statusText: 'Not Found' });
}
export const prerender = false;

const pageTitle = `Create New Post (DEV) - ${SITE_TITLE}`;
---

<BaseLayout title={pageTitle}>
  <div class="page-detail-header" style="margin-bottom: 1.5rem;">
    <h1>Create New Post</h1>
  </div>

  <form id="createPostForm" class="post-form">
    <PostForm client:load key="create-form" /> {/* Added a static key for create form instance stability */}
    <button type="submit" class="button-primary" style="margin-top: 1rem;">Save New Post</button>
  </form>

  {/* Feedback area can still be used for errors or very brief success before redirect */}
  <div id="formFeedback" style="margin-top: 1.5rem; padding: 1rem; border-radius: 4px; display: none;">
    <p id="feedbackMessage"></p>
    {/* viewPostLink is not needed if we redirect to edit page */}
  </div>
</BaseLayout>

<script>
  const form = document.getElementById('createPostForm') as HTMLFormElement | null;
  const formFeedback = document.getElementById('formFeedback') as HTMLDivElement | null;
  const feedbackMessage = document.getElementById('feedbackMessage') as HTMLParagraphElement | null;
  // const viewPostLink = document.getElementById('viewPostLink') as HTMLAnchorElement | null; // Not needed

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement | null;

      if (submitButton) {
        submitButton.disabled = true;
        submitButton.textContent = 'Saving...';
      }
      if (formFeedback) formFeedback.style.display = 'none';

      const formData = new FormData(form);
      const data: Record<string, any> = {};
      formData.forEach((value, key) => { data[key] = value; });
      data.draft = formData.has('draft');

      if (data.bookCoverImageName !== undefined || data.bookCoverAlt !== undefined) {
          data.bookCover = {
              imageName: data.bookCoverImageName || '',
              alt: data.bookCoverAlt || ''
          };
          delete data.bookCoverImageName;
          delete data.bookCoverAlt;
      }

      try {
        const response = await fetch('/api/create-post-handler', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        if (response.ok) {
          console.log("API Success Response from /api/create-post-handler:", result); // <--- ADD THIS LINE

          // Instead of resetting form and showing message here, redirect to the edit page
          if (result.newSlug) { // create-post-handler returns `newSlug` which is just the slug part
            window.location.href = `/admin/edit/${result.newSlug}/`; // Redirect
          } else {
            if (feedbackMessage && formFeedback) {
                feedbackMessage.textContent = 'Post created successfully, but could not redirect (newSlug missing or empty in API response). Please find it in "Manage Posts".';
                // ... (style feedback as error or warning)
                formFeedback.style.backgroundColor = '#fff3cd'; // A warning yellow
                formFeedback.style.border = '1px solid #ffeeba';
                formFeedback.style.color = '#856404';
                formFeedback.style.display = 'block';
                console.warn("Redirect failed. API result:", result); // Log again for warning case
            }
          }
        } else { // Handle API error
          if (feedbackMessage && formFeedback) {
            feedbackMessage.textContent = `Error: ${result.message || response.statusText}`;
            formFeedback.style.backgroundColor = '#ffdddd';
            formFeedback.style.border = '1px solid red';
            formFeedback.style.display = 'block';
          }
        }
      } catch (error) { // Handle network/fetch error
        console.error('Network or other error:', error);
        if (feedbackMessage && formFeedback) {
            feedbackMessage.textContent = 'Network error or failed to connect to the API.';
            formFeedback.style.backgroundColor = '#ffdddd';
            formFeedback.style.border = '1px solid red';
            formFeedback.style.display = 'block';
        }
      } finally {
        // Only re-enable button if not redirecting or if redirect failed to be initiated
        // If redirect happens, this page is gone.
        if (submitButton && (!response || !response.ok || (response.ok && !result.newSlug))) {
            submitButton.disabled = false;
            submitButton.textContent = 'Save New Post';
        }
        if (formFeedback && formFeedback.style.display === 'block') { // only scroll if feedback shown
             formFeedback.scrollIntoView({ behavior: 'smooth' });
        }
      }
    });
  }
</script>
<style>
  /* Styles should be global or within PostForm.tsx */
</style>
